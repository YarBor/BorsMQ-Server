syntax = "proto3";

package MqServer;
option go_package = "./rpc";

service MqServerCall {
  rpc JoinConsumerGroup(JoinConsumerGroupRequest)
      returns (JoinConsumerGroupResponse) {}
  rpc LeaveConsumerGroup(LeaveConsumerGroupRequest)
      returns (LeaveConsumerGroupResponse) {}
  rpc CheckSourceTerm(CheckSourceTermRequest)
      returns (CheckSourceTermResponse) {}
  //  rpc GetCorrespondPartition(GetCorrespondPartitionRequest) returns
  //  (GetCorrespondPartitionResponse) {}
  //订阅
  rpc SubscribeTopic(SubscribeTopicRequest) returns (SubscribeTopicResponse) {}
  rpc UnSubscribeTopic(UnSubscribeTopicRequest)
      returns (UnSubscribeTopicResponse) {}
  // 注册消费者组
  rpc RegisterConsumerGroup(RegisterConsumerGroupRequest)
      returns (RegisterConsumerGroupResponse) {}
  // 创建话题
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse) {}
  rpc QueryTopic(QueryTopicRequest) returns (QueryTopicResponse) {}
  rpc DestroyTopic(DestroyTopicRequest) returns (DestroyTopicResponse) {}
  // Add / Del Part
  rpc AddPart(AddPartRequest) returns (AddPartResponse) {}
  rpc RemovePart(RemovePartRequest) returns (RemovePartResponse) {}
  // 注册
  rpc RegisterConsumer(RegisterConsumerRequest)
      returns (RegisterConsumerResponse) {}
  rpc RegisterProducer(RegisterProducerRequest)
      returns (RegisterProducerResponse) {}
  // 注销
  rpc UnRegisterConsumer(UnRegisterConsumerRequest)
      returns (UnRegisterConsumerResponse) {}
  rpc UnRegisterProducer(UnRegisterProducerRequest)
      returns (UnRegisterProducerResponse) {}

  // 客户端和server之间的心跳
  rpc Heartbeat(HeartBeatRequest) returns (Response) {}
  rpc ConsumerDisConnect(DisConnectInfo) returns (Response) {}
  rpc ProducerDisConnect(DisConnectInfo) returns (Response) {}
  // 拉取消息
  rpc PullMessage(PullMessageRequest) returns (PullMessageResponse) {}
  // 推送消息
  rpc PushMessage(PushMessageRequest) returns (PushMessageResponse) {}
}

message DisConnectInfo {
  Credentials BrokerInfo = 1;
  Credentials TargetInfo = 2;
}

message AddPartRequest {
  Credentials Cred = 1;
  Partition part = 3;
}

message AddPartResponse { Response res = 1; }

message RemovePartRequest {
  Credentials Cred = 1;
  string Topic = 2;
  string Part = 3;
}

message RemovePartResponse { Response res = 1; }

message SubscribeTopicRequest {
  Credentials CGCred = 4;
  string Tp = 3;
}

message SubscribeTopicResponse { Response res = 1; }

message UnSubscribeTopicRequest {
  Credentials CGCred = 4;
  string Tp = 3;
}

message UnSubscribeTopicResponse { Response res = 1; }

// message GetCorrespondPartitionResponse {
//   Response res = 4;
//   int32 TopicTerm = 1;
//   int32 GroupTerm = 2;
//   repeated Partition FcParts = 3;
// }

//
// message GetCorrespondPartitionRequest {
//  Credentials ConsCred = 4;
//  Credentials GroupCred = 3;
//  int32 TopicTerm = 1;
//  int32 GroupTerm = 2;
//}
//

message CheckSourceTermResponse {
  Response res = 5;
  int32 TopicTerm = 1;
  int32 GroupTerm = 2;
  message PartsData { repeated Partition FcParts = 3; }
  optional PartsData ConsumersData = 16;
  optional PartsData TopicData = 6;
}

message CheckSourceTermRequest {
  message TopicCheck {
    string topic = 4;
    int32 TopicTerm = 1;
  }
  message ConsumerCheck {
    optional string ConsumerId = 13;
    int32 GroupTerm = 2;
  }
  Credentials Self = 3;
  optional TopicCheck TopicData = 4;
  optional ConsumerCheck ConsumerData = 16;
}

message LeaveConsumerGroupRequest {
  Credentials GroupCred = 1;
  Credentials ConsumerCred = 2;
}

message LeaveConsumerGroupResponse { Response res = 1; }

message JoinConsumerGroupRequest {
  Credentials Cred = 1;
  string ConsumerGroupId = 2;
}

message JoinConsumerGroupResponse {
  Response res = 1;
  repeated Partition FcParts = 3;
  int32 GroupTerm = 4;
}

message RegisterConsumerGroupRequest {
  enum PullOptionMode {
    unSet = 0;
    Earliest = 3;
    Latest = 1;
  }
  PullOptionMode PullOption = 2;
  optional string GroupId = 3;
}

message RegisterConsumerGroupResponse {
  Response res = 2;
  int32 GroupTerm = 4;
  Credentials Cred = 1;
}

// 凭证/通过这个找到对应的Consumer
message Credentials {
  enum CredentialsIdentity {
    Consumer = 0;
    Producer = 1;
    Broker = 2;
    ConsumerGroup = 3;
  }
  CredentialsIdentity Identity = 1;
  string Id = 2;
  string Key = 3;
}

message HeartBeatRequest {
  Credentials Self = 1;
  optional Credentials GroupCred = 3;
  // Consumer's receive message offset
  optional int32 offset = 2;
}

message Response {
  enum Mode {
    Success = 0;
    Failure = 1;
    NotServe = 9;
    ErrTimeout = 8;
    ErrNotLeader = 7;
    ErrSourceNotExist = 2;
    ErrSourceAlreadyExist = 6;
    ErrPartitionChanged = 3;
    ErrRequestIllegal = 4;
    ErrSourceNotEnough = 5;
  }
  Mode mode = 1;
}

message RegisterConsumerRequest {
  int32 MaxReturnMessageSize = 3;
  int32 timeoutSessionMsec = 4;
}

message BrokerData {
  string Id = 1;
  string Url = 2;
}

message TpData {
  string Topic = 1;
  int32 TpTerm = 2;
  repeated Partition Parts = 3;
}

message Partition {
  string Topic = 1;
  string Part = 2;
  repeated BrokerData Brokers = 3;
}

message RegisterConsumerResponse {
  Response response = 1;
  Credentials Credential = 2;
}

message RegisterProducerRequest {
  string FocalTopic = 1;
  //  int32 TimeoutSessionMsec = 2;
  int32 MaxPushMessageSize = 3;
}

message RegisterProducerResponse {
  Response response = 1;
  Credentials Credential = 2;
  TpData tpData = 3;
  int32 AllowPushMessageSize = 4;
  int32 AllowPushMessageCount = 5;
}

message CreateTopicRequest {
  string Topic = 1;
  message PartitionCreateDetails {
    string PartitionName = 1;
    int32 ReplicationNumber = 2;
  }
  repeated PartitionCreateDetails Partition = 3;
}

message CreateTopicResponse {
  Response response = 1;
  TpData tp = 2;
}

message QueryTopicRequest {
  Credentials credential = 2;
  string Topic = 1;
}

message QueryTopicResponse {
  Response response = 1;
  repeated Partition PartitionDetails = 2;
  int32 TopicTerm = 3;
}

message DestroyTopicRequest { string Topic = 1; }

message DestroyTopicResponse { Response response = 1; }

message UnRegisterConsumerRequest { Credentials credential = 1; }

message UnRegisterConsumerResponse { Response response = 1; }

message UnRegisterProducerRequest { Credentials credential = 1; }

message UnRegisterProducerResponse { Response response = 1; }

message Message { bytes Message = 1; }

message PushMessageRequest {
  Credentials credential = 1;
  repeated Message Msgs = 2;
}

message PushMessageResponse { Response response = 1; }

message PullMessageRequest {
  HeartBeatRequest ack = 1;
  int32 WindowSize = 2;
}

message PullMessageResponse {
  Response response = 1;
  repeated Message Msgs = 2;
}
