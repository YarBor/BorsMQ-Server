// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.1
// source: MqServerRpc.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterConsumerGroupRequest_PullOptionMode int32

const (
	RegisterConsumerGroupRequest_unSet    RegisterConsumerGroupRequest_PullOptionMode = 0
	RegisterConsumerGroupRequest_Earliest RegisterConsumerGroupRequest_PullOptionMode = 3
	RegisterConsumerGroupRequest_Latest   RegisterConsumerGroupRequest_PullOptionMode = 1
	RegisterConsumerGroupRequest_None     RegisterConsumerGroupRequest_PullOptionMode = 2
)

// Enum value maps for RegisterConsumerGroupRequest_PullOptionMode.
var (
	RegisterConsumerGroupRequest_PullOptionMode_name = map[int32]string{
		0: "unSet",
		3: "Earliest",
		1: "Latest",
		2: "None",
	}
	RegisterConsumerGroupRequest_PullOptionMode_value = map[string]int32{
		"unSet":    0,
		"Earliest": 3,
		"Latest":   1,
		"None":     2,
	}
)

func (x RegisterConsumerGroupRequest_PullOptionMode) Enum() *RegisterConsumerGroupRequest_PullOptionMode {
	p := new(RegisterConsumerGroupRequest_PullOptionMode)
	*p = x
	return p
}

func (x RegisterConsumerGroupRequest_PullOptionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterConsumerGroupRequest_PullOptionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_MqServerRpc_proto_enumTypes[0].Descriptor()
}

func (RegisterConsumerGroupRequest_PullOptionMode) Type() protoreflect.EnumType {
	return &file_MqServerRpc_proto_enumTypes[0]
}

func (x RegisterConsumerGroupRequest_PullOptionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterConsumerGroupRequest_PullOptionMode.Descriptor instead.
func (RegisterConsumerGroupRequest_PullOptionMode) EnumDescriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{10, 0}
}

type Credentials_CredentialsIdentity int32

const (
	Credentials_Consumer      Credentials_CredentialsIdentity = 0
	Credentials_Producer      Credentials_CredentialsIdentity = 1
	Credentials_Broker        Credentials_CredentialsIdentity = 2
	Credentials_ConsumerGroup Credentials_CredentialsIdentity = 3
)

// Enum value maps for Credentials_CredentialsIdentity.
var (
	Credentials_CredentialsIdentity_name = map[int32]string{
		0: "Consumer",
		1: "Producer",
		2: "Broker",
		3: "ConsumerGroup",
	}
	Credentials_CredentialsIdentity_value = map[string]int32{
		"Consumer":      0,
		"Producer":      1,
		"Broker":        2,
		"ConsumerGroup": 3,
	}
)

func (x Credentials_CredentialsIdentity) Enum() *Credentials_CredentialsIdentity {
	p := new(Credentials_CredentialsIdentity)
	*p = x
	return p
}

func (x Credentials_CredentialsIdentity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Credentials_CredentialsIdentity) Descriptor() protoreflect.EnumDescriptor {
	return file_MqServerRpc_proto_enumTypes[1].Descriptor()
}

func (Credentials_CredentialsIdentity) Type() protoreflect.EnumType {
	return &file_MqServerRpc_proto_enumTypes[1]
}

func (x Credentials_CredentialsIdentity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Credentials_CredentialsIdentity.Descriptor instead.
func (Credentials_CredentialsIdentity) EnumDescriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{12, 0}
}

type Response_Mode int32

const (
	Response_Success               Response_Mode = 0
	Response_Failure               Response_Mode = 1
	Response_NotServe              Response_Mode = 9
	Response_ErrTimeout            Response_Mode = 8
	Response_ErrNotLeader          Response_Mode = 7
	Response_ErrSourceNotExist     Response_Mode = 2
	Response_ErrSourceAlreadyExist Response_Mode = 6
	Response_ErrPartitionChanged   Response_Mode = 3
	Response_ErrRequestIllegal     Response_Mode = 4
	Response_ErrSourceNotEnough    Response_Mode = 5
)

// Enum value maps for Response_Mode.
var (
	Response_Mode_name = map[int32]string{
		0: "Success",
		1: "Failure",
		9: "NotServe",
		8: "ErrTimeout",
		7: "ErrNotLeader",
		2: "ErrSourceNotExist",
		6: "ErrSourceAlreadyExist",
		3: "ErrPartitionChanged",
		4: "ErrRequestIllegal",
		5: "ErrSourceNotEnough",
	}
	Response_Mode_value = map[string]int32{
		"Success":               0,
		"Failure":               1,
		"NotServe":              9,
		"ErrTimeout":            8,
		"ErrNotLeader":          7,
		"ErrSourceNotExist":     2,
		"ErrSourceAlreadyExist": 6,
		"ErrPartitionChanged":   3,
		"ErrRequestIllegal":     4,
		"ErrSourceNotEnough":    5,
	}
)

func (x Response_Mode) Enum() *Response_Mode {
	p := new(Response_Mode)
	*p = x
	return p
}

func (x Response_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Response_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_MqServerRpc_proto_enumTypes[2].Descriptor()
}

func (Response_Mode) Type() protoreflect.EnumType {
	return &file_MqServerRpc_proto_enumTypes[2]
}

func (x Response_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Response_Mode.Descriptor instead.
func (Response_Mode) EnumDescriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{14, 0}
}

type ManagePartitionRequest_ManageModes int32

const (
	ManagePartitionRequest_Add      ManagePartitionRequest_ManageModes = 0
	ManagePartitionRequest_Del      ManagePartitionRequest_ManageModes = 1
	ManagePartitionRequest_Follow   ManagePartitionRequest_ManageModes = 2
	ManagePartitionRequest_UnFollow ManagePartitionRequest_ManageModes = 3
)

// Enum value maps for ManagePartitionRequest_ManageModes.
var (
	ManagePartitionRequest_ManageModes_name = map[int32]string{
		0: "Add",
		1: "Del",
		2: "Follow",
		3: "UnFollow",
	}
	ManagePartitionRequest_ManageModes_value = map[string]int32{
		"Add":      0,
		"Del":      1,
		"Follow":   2,
		"UnFollow": 3,
	}
)

func (x ManagePartitionRequest_ManageModes) Enum() *ManagePartitionRequest_ManageModes {
	p := new(ManagePartitionRequest_ManageModes)
	*p = x
	return p
}

func (x ManagePartitionRequest_ManageModes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManagePartitionRequest_ManageModes) Descriptor() protoreflect.EnumDescriptor {
	return file_MqServerRpc_proto_enumTypes[3].Descriptor()
}

func (ManagePartitionRequest_ManageModes) Type() protoreflect.EnumType {
	return &file_MqServerRpc_proto_enumTypes[3]
}

func (x ManagePartitionRequest_ManageModes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManagePartitionRequest_ManageModes.Descriptor instead.
func (ManagePartitionRequest_ManageModes) EnumDescriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{37, 0}
}

type UnRegisterConsumerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res *Response `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *UnRegisterConsumerGroupResponse) Reset() {
	*x = UnRegisterConsumerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterConsumerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterConsumerGroupResponse) ProtoMessage() {}

func (x *UnRegisterConsumerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterConsumerGroupResponse.ProtoReflect.Descriptor instead.
func (*UnRegisterConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{0}
}

func (x *UnRegisterConsumerGroupResponse) GetRes() *Response {
	if x != nil {
		return x.Res
	}
	return nil
}

type UnRegisterConsumerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCred *Credentials `protobuf:"bytes,1,opt,name=GroupCred,proto3" json:"GroupCred,omitempty"`
}

func (x *UnRegisterConsumerGroupRequest) Reset() {
	*x = UnRegisterConsumerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterConsumerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterConsumerGroupRequest) ProtoMessage() {}

func (x *UnRegisterConsumerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterConsumerGroupRequest.ProtoReflect.Descriptor instead.
func (*UnRegisterConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{1}
}

func (x *UnRegisterConsumerGroupRequest) GetGroupCred() *Credentials {
	if x != nil {
		return x.GroupCred
	}
	return nil
}

type GetCorrespondPartitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res       *Response    `protobuf:"bytes,4,opt,name=res,proto3" json:"res,omitempty"`
	TopicTerm int32        `protobuf:"varint,1,opt,name=TopicTerm,proto3" json:"TopicTerm,omitempty"`
	GroupTerm int32        `protobuf:"varint,2,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
	FcParts   []*Partition `protobuf:"bytes,3,rep,name=FcParts,proto3" json:"FcParts,omitempty"`
}

func (x *GetCorrespondPartitionResponse) Reset() {
	*x = GetCorrespondPartitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCorrespondPartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCorrespondPartitionResponse) ProtoMessage() {}

func (x *GetCorrespondPartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCorrespondPartitionResponse.ProtoReflect.Descriptor instead.
func (*GetCorrespondPartitionResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetCorrespondPartitionResponse) GetRes() *Response {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *GetCorrespondPartitionResponse) GetTopicTerm() int32 {
	if x != nil {
		return x.TopicTerm
	}
	return 0
}

func (x *GetCorrespondPartitionResponse) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

func (x *GetCorrespondPartitionResponse) GetFcParts() []*Partition {
	if x != nil {
		return x.FcParts
	}
	return nil
}

type GetCorrespondPartitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsCred  *Credentials `protobuf:"bytes,4,opt,name=ConsCred,proto3" json:"ConsCred,omitempty"`
	GroupCred *Credentials `protobuf:"bytes,3,opt,name=GroupCred,proto3" json:"GroupCred,omitempty"`
	TopicTerm int32        `protobuf:"varint,1,opt,name=TopicTerm,proto3" json:"TopicTerm,omitempty"`
	GroupTerm int32        `protobuf:"varint,2,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
}

func (x *GetCorrespondPartitionRequest) Reset() {
	*x = GetCorrespondPartitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCorrespondPartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCorrespondPartitionRequest) ProtoMessage() {}

func (x *GetCorrespondPartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCorrespondPartitionRequest.ProtoReflect.Descriptor instead.
func (*GetCorrespondPartitionRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetCorrespondPartitionRequest) GetConsCred() *Credentials {
	if x != nil {
		return x.ConsCred
	}
	return nil
}

func (x *GetCorrespondPartitionRequest) GetGroupCred() *Credentials {
	if x != nil {
		return x.GroupCred
	}
	return nil
}

func (x *GetCorrespondPartitionRequest) GetTopicTerm() int32 {
	if x != nil {
		return x.TopicTerm
	}
	return 0
}

func (x *GetCorrespondPartitionRequest) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

type CheckSourceTermResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res       *Response    `protobuf:"bytes,5,opt,name=res,proto3" json:"res,omitempty"`
	TopicTerm int32        `protobuf:"varint,1,opt,name=TopicTerm,proto3" json:"TopicTerm,omitempty"`
	GroupTerm int32        `protobuf:"varint,2,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
	FcParts   []*Partition `protobuf:"bytes,3,rep,name=FcParts,proto3" json:"FcParts,omitempty"`
}

func (x *CheckSourceTermResponse) Reset() {
	*x = CheckSourceTermResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceTermResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceTermResponse) ProtoMessage() {}

func (x *CheckSourceTermResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceTermResponse.ProtoReflect.Descriptor instead.
func (*CheckSourceTermResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{4}
}

func (x *CheckSourceTermResponse) GetRes() *Response {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *CheckSourceTermResponse) GetTopicTerm() int32 {
	if x != nil {
		return x.TopicTerm
	}
	return 0
}

func (x *CheckSourceTermResponse) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

func (x *CheckSourceTermResponse) GetFcParts() []*Partition {
	if x != nil {
		return x.FcParts
	}
	return nil
}

type CheckSourceTermRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsCred  *Credentials `protobuf:"bytes,4,opt,name=ConsCred,proto3" json:"ConsCred,omitempty"`
	GroupCred *Credentials `protobuf:"bytes,3,opt,name=GroupCred,proto3" json:"GroupCred,omitempty"`
	TopicTerm int32        `protobuf:"varint,1,opt,name=TopicTerm,proto3" json:"TopicTerm,omitempty"`
	GroupTerm int32        `protobuf:"varint,2,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
}

func (x *CheckSourceTermRequest) Reset() {
	*x = CheckSourceTermRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceTermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceTermRequest) ProtoMessage() {}

func (x *CheckSourceTermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceTermRequest.ProtoReflect.Descriptor instead.
func (*CheckSourceTermRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{5}
}

func (x *CheckSourceTermRequest) GetConsCred() *Credentials {
	if x != nil {
		return x.ConsCred
	}
	return nil
}

func (x *CheckSourceTermRequest) GetGroupCred() *Credentials {
	if x != nil {
		return x.GroupCred
	}
	return nil
}

func (x *CheckSourceTermRequest) GetTopicTerm() int32 {
	if x != nil {
		return x.TopicTerm
	}
	return 0
}

func (x *CheckSourceTermRequest) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

type LeaveConsumerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCred    *Credentials `protobuf:"bytes,1,opt,name=GroupCred,proto3" json:"GroupCred,omitempty"`
	ConsumerCred *Credentials `protobuf:"bytes,2,opt,name=ConsumerCred,proto3" json:"ConsumerCred,omitempty"`
}

func (x *LeaveConsumerGroupRequest) Reset() {
	*x = LeaveConsumerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveConsumerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveConsumerGroupRequest) ProtoMessage() {}

func (x *LeaveConsumerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveConsumerGroupRequest.ProtoReflect.Descriptor instead.
func (*LeaveConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{6}
}

func (x *LeaveConsumerGroupRequest) GetGroupCred() *Credentials {
	if x != nil {
		return x.GroupCred
	}
	return nil
}

func (x *LeaveConsumerGroupRequest) GetConsumerCred() *Credentials {
	if x != nil {
		return x.ConsumerCred
	}
	return nil
}

type LeaveConsumerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res *Response `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *LeaveConsumerGroupResponse) Reset() {
	*x = LeaveConsumerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveConsumerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveConsumerGroupResponse) ProtoMessage() {}

func (x *LeaveConsumerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveConsumerGroupResponse.ProtoReflect.Descriptor instead.
func (*LeaveConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{7}
}

func (x *LeaveConsumerGroupResponse) GetRes() *Response {
	if x != nil {
		return x.Res
	}
	return nil
}

type JoinConsumerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cred            *Credentials `protobuf:"bytes,1,opt,name=Cred,proto3" json:"Cred,omitempty"`
	ConsumerGroupId string       `protobuf:"bytes,2,opt,name=ConsumerGroupId,proto3" json:"ConsumerGroupId,omitempty"`
}

func (x *JoinConsumerGroupRequest) Reset() {
	*x = JoinConsumerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinConsumerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinConsumerGroupRequest) ProtoMessage() {}

func (x *JoinConsumerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinConsumerGroupRequest.ProtoReflect.Descriptor instead.
func (*JoinConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{8}
}

func (x *JoinConsumerGroupRequest) GetCred() *Credentials {
	if x != nil {
		return x.Cred
	}
	return nil
}

func (x *JoinConsumerGroupRequest) GetConsumerGroupId() string {
	if x != nil {
		return x.ConsumerGroupId
	}
	return ""
}

type JoinConsumerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res       *Response    `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	FcParts   []*Partition `protobuf:"bytes,3,rep,name=FcParts,proto3" json:"FcParts,omitempty"`
	GroupTerm int32        `protobuf:"varint,4,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
}

func (x *JoinConsumerGroupResponse) Reset() {
	*x = JoinConsumerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinConsumerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinConsumerGroupResponse) ProtoMessage() {}

func (x *JoinConsumerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinConsumerGroupResponse.ProtoReflect.Descriptor instead.
func (*JoinConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{9}
}

func (x *JoinConsumerGroupResponse) GetRes() *Response {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *JoinConsumerGroupResponse) GetFcParts() []*Partition {
	if x != nil {
		return x.FcParts
	}
	return nil
}

func (x *JoinConsumerGroupResponse) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

type RegisterConsumerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PullOption RegisterConsumerGroupRequest_PullOptionMode `protobuf:"varint,2,opt,name=PullOption,proto3,enum=MqServer.RegisterConsumerGroupRequest_PullOptionMode" json:"PullOption,omitempty"`
	GroupId    *string                                     `protobuf:"bytes,3,opt,name=GroupId,proto3,oneof" json:"GroupId,omitempty"`
}

func (x *RegisterConsumerGroupRequest) Reset() {
	*x = RegisterConsumerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerGroupRequest) ProtoMessage() {}

func (x *RegisterConsumerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerGroupRequest.ProtoReflect.Descriptor instead.
func (*RegisterConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{10}
}

func (x *RegisterConsumerGroupRequest) GetPullOption() RegisterConsumerGroupRequest_PullOptionMode {
	if x != nil {
		return x.PullOption
	}
	return RegisterConsumerGroupRequest_unSet
}

func (x *RegisterConsumerGroupRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type RegisterConsumerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res       *Response    `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
	Id        string       `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	GroupTerm int32        `protobuf:"varint,4,opt,name=GroupTerm,proto3" json:"GroupTerm,omitempty"`
	Cred      *Credentials `protobuf:"bytes,1,opt,name=Cred,proto3" json:"Cred,omitempty"`
}

func (x *RegisterConsumerGroupResponse) Reset() {
	*x = RegisterConsumerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerGroupResponse) ProtoMessage() {}

func (x *RegisterConsumerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerGroupResponse.ProtoReflect.Descriptor instead.
func (*RegisterConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{11}
}

func (x *RegisterConsumerGroupResponse) GetRes() *Response {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *RegisterConsumerGroupResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterConsumerGroupResponse) GetGroupTerm() int32 {
	if x != nil {
		return x.GroupTerm
	}
	return 0
}

func (x *RegisterConsumerGroupResponse) GetCred() *Credentials {
	if x != nil {
		return x.Cred
	}
	return nil
}

// 凭证/通过这个找到对应的Consumer
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity Credentials_CredentialsIdentity `protobuf:"varint,1,opt,name=Identity,proto3,enum=MqServer.Credentials_CredentialsIdentity" json:"Identity,omitempty"`
	Id       string                          `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Key      string                          `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{12}
}

func (x *Credentials) GetIdentity() Credentials_CredentialsIdentity {
	if x != nil {
		return x.Identity
	}
	return Credentials_Consumer
}

func (x *Credentials) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Credentials) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsCred  *Credentials `protobuf:"bytes,1,opt,name=ConsCred,proto3" json:"ConsCred,omitempty"`
	GroupCred *Credentials `protobuf:"bytes,3,opt,name=GroupCred,proto3" json:"GroupCred,omitempty"`
	// Consumer's receive message offset
	Offset *int32 `protobuf:"varint,2,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{13}
}

func (x *Ack) GetConsCred() *Credentials {
	if x != nil {
		return x.ConsCred
	}
	return nil
}

func (x *Ack) GetGroupCred() *Credentials {
	if x != nil {
		return x.GroupCred
	}
	return nil
}

func (x *Ack) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Response_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=MqServer.Response_Mode" json:"mode,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{14}
}

func (x *Response) GetMode() Response_Mode {
	if x != nil {
		return x.Mode
	}
	return Response_Success
}

type RegisterConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// empty for all
	MaxReturnMessageSize int32 `protobuf:"varint,3,opt,name=MaxReturnMessageSize,proto3" json:"MaxReturnMessageSize,omitempty"`
	TimeoutSessionMsec   int32 `protobuf:"varint,4,opt,name=timeoutSessionMsec,proto3" json:"timeoutSessionMsec,omitempty"`
}

func (x *RegisterConsumerRequest) Reset() {
	*x = RegisterConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerRequest) ProtoMessage() {}

func (x *RegisterConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerRequest.ProtoReflect.Descriptor instead.
func (*RegisterConsumerRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{15}
}

func (x *RegisterConsumerRequest) GetMaxReturnMessageSize() int32 {
	if x != nil {
		return x.MaxReturnMessageSize
	}
	return 0
}

func (x *RegisterConsumerRequest) GetTimeoutSessionMsec() int32 {
	if x != nil {
		return x.TimeoutSessionMsec
	}
	return 0
}

type BrokerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *BrokerData) Reset() {
	*x = BrokerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerData) ProtoMessage() {}

func (x *BrokerData) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerData.ProtoReflect.Descriptor instead.
func (*BrokerData) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{16}
}

func (x *BrokerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrokerData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic  string       `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	TpTerm int32        `protobuf:"varint,2,opt,name=TpTerm,proto3" json:"TpTerm,omitempty"`
	Parts  []*Partition `protobuf:"bytes,3,rep,name=Parts,proto3" json:"Parts,omitempty"`
}

func (x *TpData) Reset() {
	*x = TpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpData) ProtoMessage() {}

func (x *TpData) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpData.ProtoReflect.Descriptor instead.
func (*TpData) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{17}
}

func (x *TpData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TpData) GetTpTerm() int32 {
	if x != nil {
		return x.TpTerm
	}
	return 0
}

func (x *TpData) GetParts() []*Partition {
	if x != nil {
		return x.Parts
	}
	return nil
}

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   string        `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Part    string        `protobuf:"bytes,2,opt,name=Part,proto3" json:"Part,omitempty"`
	Brokers []*BrokerData `protobuf:"bytes,3,rep,name=Brokers,proto3" json:"Brokers,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{18}
}

func (x *Partition) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Partition) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *Partition) GetBrokers() []*BrokerData {
	if x != nil {
		return x.Brokers
	}
	return nil
}

type RegisterConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *Response    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Credential *Credentials `protobuf:"bytes,2,opt,name=Credential,proto3" json:"Credential,omitempty"`
}

func (x *RegisterConsumerResponse) Reset() {
	*x = RegisterConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerResponse) ProtoMessage() {}

func (x *RegisterConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerResponse.ProtoReflect.Descriptor instead.
func (*RegisterConsumerResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterConsumerResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RegisterConsumerResponse) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

type RegisterProducerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FocalTopic string `protobuf:"bytes,1,opt,name=FocalTopic,proto3" json:"FocalTopic,omitempty"`
	// int32 TimeoutSessionMsec = 2;
	MaxPushMessageSize int32 `protobuf:"varint,3,opt,name=MaxPushMessageSize,proto3" json:"MaxPushMessageSize,omitempty"`
}

func (x *RegisterProducerRequest) Reset() {
	*x = RegisterProducerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterProducerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterProducerRequest) ProtoMessage() {}

func (x *RegisterProducerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterProducerRequest.ProtoReflect.Descriptor instead.
func (*RegisterProducerRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{20}
}

func (x *RegisterProducerRequest) GetFocalTopic() string {
	if x != nil {
		return x.FocalTopic
	}
	return ""
}

func (x *RegisterProducerRequest) GetMaxPushMessageSize() int32 {
	if x != nil {
		return x.MaxPushMessageSize
	}
	return 0
}

type RegisterProducerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response              *Response    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Credential            *Credentials `protobuf:"bytes,2,opt,name=Credential,proto3" json:"Credential,omitempty"`
	TpData                *TpData      `protobuf:"bytes,3,opt,name=tpData,proto3" json:"tpData,omitempty"`
	AllowPushMessageSize  int32        `protobuf:"varint,4,opt,name=AllowPushMessageSize,proto3" json:"AllowPushMessageSize,omitempty"`
	AllowPushMessageCount int32        `protobuf:"varint,5,opt,name=AllowPushMessageCount,proto3" json:"AllowPushMessageCount,omitempty"`
}

func (x *RegisterProducerResponse) Reset() {
	*x = RegisterProducerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterProducerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterProducerResponse) ProtoMessage() {}

func (x *RegisterProducerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterProducerResponse.ProtoReflect.Descriptor instead.
func (*RegisterProducerResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{21}
}

func (x *RegisterProducerResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RegisterProducerResponse) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *RegisterProducerResponse) GetTpData() *TpData {
	if x != nil {
		return x.TpData
	}
	return nil
}

func (x *RegisterProducerResponse) GetAllowPushMessageSize() int32 {
	if x != nil {
		return x.AllowPushMessageSize
	}
	return 0
}

func (x *RegisterProducerResponse) GetAllowPushMessageCount() int32 {
	if x != nil {
		return x.AllowPushMessageCount
	}
	return 0
}

type CreateTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string                                       `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Partition []*CreateTopicRequest_PartitionCreateDetails `protobuf:"bytes,3,rep,name=Partition,proto3" json:"Partition,omitempty"`
}

func (x *CreateTopicRequest) Reset() {
	*x = CreateTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicRequest) ProtoMessage() {}

func (x *CreateTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicRequest.ProtoReflect.Descriptor instead.
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{22}
}

func (x *CreateTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CreateTopicRequest) GetPartition() []*CreateTopicRequest_PartitionCreateDetails {
	if x != nil {
		return x.Partition
	}
	return nil
}

type CreateTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Tp       *TpData   `protobuf:"bytes,2,opt,name=tp,proto3" json:"tp,omitempty"`
}

func (x *CreateTopicResponse) Reset() {
	*x = CreateTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicResponse) ProtoMessage() {}

func (x *CreateTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicResponse.ProtoReflect.Descriptor instead.
func (*CreateTopicResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{23}
}

func (x *CreateTopicResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateTopicResponse) GetTp() *TpData {
	if x != nil {
		return x.Tp
	}
	return nil
}

type QueryTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credentials `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
	Topic      string       `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
}

func (x *QueryTopicRequest) Reset() {
	*x = QueryTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicRequest) ProtoMessage() {}

func (x *QueryTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicRequest.ProtoReflect.Descriptor instead.
func (*QueryTopicRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{24}
}

func (x *QueryTopicRequest) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *QueryTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type QueryTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response         *Response    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	PartitionDetails []*Partition `protobuf:"bytes,2,rep,name=PartitionDetails,proto3" json:"PartitionDetails,omitempty"`
}

func (x *QueryTopicResponse) Reset() {
	*x = QueryTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicResponse) ProtoMessage() {}

func (x *QueryTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicResponse.ProtoReflect.Descriptor instead.
func (*QueryTopicResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{25}
}

func (x *QueryTopicResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *QueryTopicResponse) GetPartitionDetails() []*Partition {
	if x != nil {
		return x.PartitionDetails
	}
	return nil
}

type DestroyTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
}

func (x *DestroyTopicRequest) Reset() {
	*x = DestroyTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyTopicRequest) ProtoMessage() {}

func (x *DestroyTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyTopicRequest.ProtoReflect.Descriptor instead.
func (*DestroyTopicRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{26}
}

func (x *DestroyTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type DestroyTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DestroyTopicResponse) Reset() {
	*x = DestroyTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyTopicResponse) ProtoMessage() {}

func (x *DestroyTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyTopicResponse.ProtoReflect.Descriptor instead.
func (*DestroyTopicResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{27}
}

func (x *DestroyTopicResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UnRegisterConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credentials `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *UnRegisterConsumerRequest) Reset() {
	*x = UnRegisterConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterConsumerRequest) ProtoMessage() {}

func (x *UnRegisterConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterConsumerRequest.ProtoReflect.Descriptor instead.
func (*UnRegisterConsumerRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{28}
}

func (x *UnRegisterConsumerRequest) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

type UnRegisterConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UnRegisterConsumerResponse) Reset() {
	*x = UnRegisterConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterConsumerResponse) ProtoMessage() {}

func (x *UnRegisterConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterConsumerResponse.ProtoReflect.Descriptor instead.
func (*UnRegisterConsumerResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{29}
}

func (x *UnRegisterConsumerResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UnRegisterProducerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credentials `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *UnRegisterProducerRequest) Reset() {
	*x = UnRegisterProducerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterProducerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterProducerRequest) ProtoMessage() {}

func (x *UnRegisterProducerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterProducerRequest.ProtoReflect.Descriptor instead.
func (*UnRegisterProducerRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{30}
}

func (x *UnRegisterProducerRequest) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

type UnRegisterProducerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UnRegisterProducerResponse) Reset() {
	*x = UnRegisterProducerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterProducerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterProducerResponse) ProtoMessage() {}

func (x *UnRegisterProducerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterProducerResponse.ProtoReflect.Descriptor instead.
func (*UnRegisterProducerResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{31}
}

func (x *UnRegisterProducerResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{32}
}

func (x *Message) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type PushMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credentials `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Msgs       []*Message   `protobuf:"bytes,2,rep,name=Msgs,proto3" json:"Msgs,omitempty"`
}

func (x *PushMessageRequest) Reset() {
	*x = PushMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMessageRequest) ProtoMessage() {}

func (x *PushMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMessageRequest.ProtoReflect.Descriptor instead.
func (*PushMessageRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{33}
}

func (x *PushMessageRequest) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *PushMessageRequest) GetMsgs() []*Message {
	if x != nil {
		return x.Msgs
	}
	return nil
}

type PushMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *PushMessageResponse) Reset() {
	*x = PushMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMessageResponse) ProtoMessage() {}

func (x *PushMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMessageResponse.ProtoReflect.Descriptor instead.
func (*PushMessageResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{34}
}

func (x *PushMessageResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type PullMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack        *Ack  `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	WindowSize int32 `protobuf:"varint,2,opt,name=WindowSize,proto3" json:"WindowSize,omitempty"`
}

func (x *PullMessageRequest) Reset() {
	*x = PullMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMessageRequest) ProtoMessage() {}

func (x *PullMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMessageRequest.ProtoReflect.Descriptor instead.
func (*PullMessageRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{35}
}

func (x *PullMessageRequest) GetAck() *Ack {
	if x != nil {
		return x.Ack
	}
	return nil
}

func (x *PullMessageRequest) GetWindowSize() int32 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

type PullMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response  `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Msgs     []*Message `protobuf:"bytes,2,rep,name=Msgs,proto3" json:"Msgs,omitempty"`
}

func (x *PullMessageResponse) Reset() {
	*x = PullMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMessageResponse) ProtoMessage() {}

func (x *PullMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMessageResponse.ProtoReflect.Descriptor instead.
func (*PullMessageResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{36}
}

func (x *PullMessageResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *PullMessageResponse) GetMsgs() []*Message {
	if x != nil {
		return x.Msgs
	}
	return nil
}

type ManagePartitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic               string                             `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	ManageMode          ManagePartitionRequest_ManageModes `protobuf:"varint,2,opt,name=ManageMode,proto3,enum=MqServer.ManagePartitionRequest_ManageModes" json:"ManageMode,omitempty"`
	Credential          *Credentials                       `protobuf:"bytes,3,opt,name=Credential,proto3,oneof" json:"Credential,omitempty"`
	TargetPartitionName string                             `protobuf:"bytes,4,opt,name=TargetPartitionName,proto3" json:"TargetPartitionName,omitempty"`
}

func (x *ManagePartitionRequest) Reset() {
	*x = ManagePartitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagePartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagePartitionRequest) ProtoMessage() {}

func (x *ManagePartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagePartitionRequest.ProtoReflect.Descriptor instead.
func (*ManagePartitionRequest) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{37}
}

func (x *ManagePartitionRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ManagePartitionRequest) GetManageMode() ManagePartitionRequest_ManageModes {
	if x != nil {
		return x.ManageMode
	}
	return ManagePartitionRequest_Add
}

func (x *ManagePartitionRequest) GetCredential() *Credentials {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *ManagePartitionRequest) GetTargetPartitionName() string {
	if x != nil {
		return x.TargetPartitionName
	}
	return ""
}

type ManagePartitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response      *Response    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	NowPartitions []*Partition `protobuf:"bytes,2,rep,name=NowPartitions,proto3" json:"NowPartitions,omitempty"`
}

func (x *ManagePartitionResponse) Reset() {
	*x = ManagePartitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagePartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagePartitionResponse) ProtoMessage() {}

func (x *ManagePartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagePartitionResponse.ProtoReflect.Descriptor instead.
func (*ManagePartitionResponse) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{38}
}

func (x *ManagePartitionResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ManagePartitionResponse) GetNowPartitions() []*Partition {
	if x != nil {
		return x.NowPartitions
	}
	return nil
}

type CreateTopicRequest_PartitionCreateDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionName     string `protobuf:"bytes,1,opt,name=PartitionName,proto3" json:"PartitionName,omitempty"`
	ReplicationNumber int32  `protobuf:"varint,2,opt,name=ReplicationNumber,proto3" json:"ReplicationNumber,omitempty"`
}

func (x *CreateTopicRequest_PartitionCreateDetails) Reset() {
	*x = CreateTopicRequest_PartitionCreateDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MqServerRpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicRequest_PartitionCreateDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicRequest_PartitionCreateDetails) ProtoMessage() {}

func (x *CreateTopicRequest_PartitionCreateDetails) ProtoReflect() protoreflect.Message {
	mi := &file_MqServerRpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicRequest_PartitionCreateDetails.ProtoReflect.Descriptor instead.
func (*CreateTopicRequest_PartitionCreateDetails) Descriptor() ([]byte, []int) {
	return file_MqServerRpc_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CreateTopicRequest_PartitionCreateDetails) GetPartitionName() string {
	if x != nil {
		return x.PartitionName
	}
	return ""
}

func (x *CreateTopicRequest_PartitionCreateDetails) GetReplicationNumber() int32 {
	if x != nil {
		return x.ReplicationNumber
	}
	return 0
}

var File_MqServerRpc_proto protoreflect.FileDescriptor

var file_MqServerRpc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x47, 0x0a,
	0x1f, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x1e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x64, 0x22, 0xb1, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54,
	0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x54, 0x65, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x2d, 0x0a, 0x07, 0x46, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x46, 0x63, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x22, 0xc3, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x08, 0x43, 0x6f,
	0x6e, 0x73, 0x43, 0x72, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x2d, 0x0a, 0x07, 0x46, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x46, 0x63, 0x50,
	0x61, 0x72, 0x74, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x43, 0x72,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65,
	0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x65, 0x72, 0x6d, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x22, 0x42, 0x0a, 0x1a, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x18, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x04, 0x43, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x43, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x46, 0x63,
	0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x46, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x22, 0xe1, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0a, 0x50, 0x75, 0x6c, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x22, 0x3f,
	0x0a, 0x0e, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x1d,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03,
	0x72, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x72, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x29, 0x0a, 0x04, 0x43, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x43, 0x72, 0x65, 0x64, 0x22, 0xc8, 0x01, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x08,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x03, 0x22, 0x95, 0x01, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12,
	0x31, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x43, 0x72,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x84, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x4d, 0x71, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x72,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72,
	0x72, 0x4e, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x72, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x72, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x72, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x72, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x10, 0x05, 0x22, 0x7d, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x65, 0x63, 0x22, 0x32, 0x0a, 0x0a, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0x61, 0x0a, 0x06, 0x54, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x70, 0x54,
	0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x70, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x29, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x50, 0x61, 0x72, 0x74, 0x73, 0x22, 0x65, 0x0a, 0x09,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x69, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x4d, 0x61, 0x78, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x32, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x75, 0x73,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x51, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4d, 0x71, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6c, 0x0a, 0x16, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x02, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x74,
	0x70, 0x22, 0x60, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x46, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x52, 0x0a, 0x19, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x1a, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x52, 0x0a, 0x19, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x1a, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x72, 0x0a, 0x12, 0x50, 0x75, 0x73,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x22, 0x45, 0x0a,
	0x13, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x12, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x61, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6c, 0x0a, 0x13, 0x50,
	0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x16, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x4c, 0x0a, 0x0a, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x0a, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x44, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x6e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x10,
	0x03, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x22, 0x84, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d,
	0x4e, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x4e, 0x6f, 0x77, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x8a, 0x0c, 0x0a, 0x0c, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x20,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e,
	0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x70, 0x0a, 0x17, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1b, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x12, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4d, 0x71,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x4d, 0x71, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x12, 0x0d, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x6b, 0x1a, 0x12, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x4d, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_MqServerRpc_proto_rawDescOnce sync.Once
	file_MqServerRpc_proto_rawDescData = file_MqServerRpc_proto_rawDesc
)

func file_MqServerRpc_proto_rawDescGZIP() []byte {
	file_MqServerRpc_proto_rawDescOnce.Do(func() {
		file_MqServerRpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_MqServerRpc_proto_rawDescData)
	})
	return file_MqServerRpc_proto_rawDescData
}

var file_MqServerRpc_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_MqServerRpc_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_MqServerRpc_proto_goTypes = []interface{}{
	(RegisterConsumerGroupRequest_PullOptionMode)(0),  // 0: MqServer.RegisterConsumerGroupRequest.PullOptionMode
	(Credentials_CredentialsIdentity)(0),              // 1: MqServer.Credentials.CredentialsIdentity
	(Response_Mode)(0),                                // 2: MqServer.Response.Mode
	(ManagePartitionRequest_ManageModes)(0),           // 3: MqServer.ManagePartitionRequest.ManageModes
	(*UnRegisterConsumerGroupResponse)(nil),           // 4: MqServer.UnRegisterConsumerGroupResponse
	(*UnRegisterConsumerGroupRequest)(nil),            // 5: MqServer.UnRegisterConsumerGroupRequest
	(*GetCorrespondPartitionResponse)(nil),            // 6: MqServer.GetCorrespondPartitionResponse
	(*GetCorrespondPartitionRequest)(nil),             // 7: MqServer.GetCorrespondPartitionRequest
	(*CheckSourceTermResponse)(nil),                   // 8: MqServer.CheckSourceTermResponse
	(*CheckSourceTermRequest)(nil),                    // 9: MqServer.CheckSourceTermRequest
	(*LeaveConsumerGroupRequest)(nil),                 // 10: MqServer.LeaveConsumerGroupRequest
	(*LeaveConsumerGroupResponse)(nil),                // 11: MqServer.LeaveConsumerGroupResponse
	(*JoinConsumerGroupRequest)(nil),                  // 12: MqServer.JoinConsumerGroupRequest
	(*JoinConsumerGroupResponse)(nil),                 // 13: MqServer.JoinConsumerGroupResponse
	(*RegisterConsumerGroupRequest)(nil),              // 14: MqServer.RegisterConsumerGroupRequest
	(*RegisterConsumerGroupResponse)(nil),             // 15: MqServer.RegisterConsumerGroupResponse
	(*Credentials)(nil),                               // 16: MqServer.Credentials
	(*Ack)(nil),                                       // 17: MqServer.Ack
	(*Response)(nil),                                  // 18: MqServer.Response
	(*RegisterConsumerRequest)(nil),                   // 19: MqServer.RegisterConsumerRequest
	(*BrokerData)(nil),                                // 20: MqServer.BrokerData
	(*TpData)(nil),                                    // 21: MqServer.TpData
	(*Partition)(nil),                                 // 22: MqServer.Partition
	(*RegisterConsumerResponse)(nil),                  // 23: MqServer.RegisterConsumerResponse
	(*RegisterProducerRequest)(nil),                   // 24: MqServer.RegisterProducerRequest
	(*RegisterProducerResponse)(nil),                  // 25: MqServer.RegisterProducerResponse
	(*CreateTopicRequest)(nil),                        // 26: MqServer.CreateTopicRequest
	(*CreateTopicResponse)(nil),                       // 27: MqServer.CreateTopicResponse
	(*QueryTopicRequest)(nil),                         // 28: MqServer.QueryTopicRequest
	(*QueryTopicResponse)(nil),                        // 29: MqServer.QueryTopicResponse
	(*DestroyTopicRequest)(nil),                       // 30: MqServer.DestroyTopicRequest
	(*DestroyTopicResponse)(nil),                      // 31: MqServer.DestroyTopicResponse
	(*UnRegisterConsumerRequest)(nil),                 // 32: MqServer.UnRegisterConsumerRequest
	(*UnRegisterConsumerResponse)(nil),                // 33: MqServer.UnRegisterConsumerResponse
	(*UnRegisterProducerRequest)(nil),                 // 34: MqServer.UnRegisterProducerRequest
	(*UnRegisterProducerResponse)(nil),                // 35: MqServer.UnRegisterProducerResponse
	(*Message)(nil),                                   // 36: MqServer.Message
	(*PushMessageRequest)(nil),                        // 37: MqServer.PushMessageRequest
	(*PushMessageResponse)(nil),                       // 38: MqServer.PushMessageResponse
	(*PullMessageRequest)(nil),                        // 39: MqServer.PullMessageRequest
	(*PullMessageResponse)(nil),                       // 40: MqServer.PullMessageResponse
	(*ManagePartitionRequest)(nil),                    // 41: MqServer.ManagePartitionRequest
	(*ManagePartitionResponse)(nil),                   // 42: MqServer.ManagePartitionResponse
	(*CreateTopicRequest_PartitionCreateDetails)(nil), // 43: MqServer.CreateTopicRequest.PartitionCreateDetails
}
var file_MqServerRpc_proto_depIdxs = []int32{
	18, // 0: MqServer.UnRegisterConsumerGroupResponse.res:type_name -> MqServer.Response
	16, // 1: MqServer.UnRegisterConsumerGroupRequest.GroupCred:type_name -> MqServer.Credentials
	18, // 2: MqServer.GetCorrespondPartitionResponse.res:type_name -> MqServer.Response
	22, // 3: MqServer.GetCorrespondPartitionResponse.FcParts:type_name -> MqServer.Partition
	16, // 4: MqServer.GetCorrespondPartitionRequest.ConsCred:type_name -> MqServer.Credentials
	16, // 5: MqServer.GetCorrespondPartitionRequest.GroupCred:type_name -> MqServer.Credentials
	18, // 6: MqServer.CheckSourceTermResponse.res:type_name -> MqServer.Response
	22, // 7: MqServer.CheckSourceTermResponse.FcParts:type_name -> MqServer.Partition
	16, // 8: MqServer.CheckSourceTermRequest.ConsCred:type_name -> MqServer.Credentials
	16, // 9: MqServer.CheckSourceTermRequest.GroupCred:type_name -> MqServer.Credentials
	16, // 10: MqServer.LeaveConsumerGroupRequest.GroupCred:type_name -> MqServer.Credentials
	16, // 11: MqServer.LeaveConsumerGroupRequest.ConsumerCred:type_name -> MqServer.Credentials
	18, // 12: MqServer.LeaveConsumerGroupResponse.res:type_name -> MqServer.Response
	16, // 13: MqServer.JoinConsumerGroupRequest.Cred:type_name -> MqServer.Credentials
	18, // 14: MqServer.JoinConsumerGroupResponse.res:type_name -> MqServer.Response
	22, // 15: MqServer.JoinConsumerGroupResponse.FcParts:type_name -> MqServer.Partition
	0,  // 16: MqServer.RegisterConsumerGroupRequest.PullOption:type_name -> MqServer.RegisterConsumerGroupRequest.PullOptionMode
	18, // 17: MqServer.RegisterConsumerGroupResponse.res:type_name -> MqServer.Response
	16, // 18: MqServer.RegisterConsumerGroupResponse.Cred:type_name -> MqServer.Credentials
	1,  // 19: MqServer.Credentials.Identity:type_name -> MqServer.Credentials.CredentialsIdentity
	16, // 20: MqServer.Ack.ConsCred:type_name -> MqServer.Credentials
	16, // 21: MqServer.Ack.GroupCred:type_name -> MqServer.Credentials
	2,  // 22: MqServer.Response.mode:type_name -> MqServer.Response.Mode
	22, // 23: MqServer.TpData.Parts:type_name -> MqServer.Partition
	20, // 24: MqServer.Partition.Brokers:type_name -> MqServer.BrokerData
	18, // 25: MqServer.RegisterConsumerResponse.response:type_name -> MqServer.Response
	16, // 26: MqServer.RegisterConsumerResponse.Credential:type_name -> MqServer.Credentials
	18, // 27: MqServer.RegisterProducerResponse.response:type_name -> MqServer.Response
	16, // 28: MqServer.RegisterProducerResponse.Credential:type_name -> MqServer.Credentials
	21, // 29: MqServer.RegisterProducerResponse.tpData:type_name -> MqServer.TpData
	43, // 30: MqServer.CreateTopicRequest.Partition:type_name -> MqServer.CreateTopicRequest.PartitionCreateDetails
	18, // 31: MqServer.CreateTopicResponse.response:type_name -> MqServer.Response
	21, // 32: MqServer.CreateTopicResponse.tp:type_name -> MqServer.TpData
	16, // 33: MqServer.QueryTopicRequest.credential:type_name -> MqServer.Credentials
	18, // 34: MqServer.QueryTopicResponse.response:type_name -> MqServer.Response
	22, // 35: MqServer.QueryTopicResponse.PartitionDetails:type_name -> MqServer.Partition
	18, // 36: MqServer.DestroyTopicResponse.response:type_name -> MqServer.Response
	16, // 37: MqServer.UnRegisterConsumerRequest.credential:type_name -> MqServer.Credentials
	18, // 38: MqServer.UnRegisterConsumerResponse.response:type_name -> MqServer.Response
	16, // 39: MqServer.UnRegisterProducerRequest.credential:type_name -> MqServer.Credentials
	18, // 40: MqServer.UnRegisterProducerResponse.response:type_name -> MqServer.Response
	16, // 41: MqServer.PushMessageRequest.credential:type_name -> MqServer.Credentials
	36, // 42: MqServer.PushMessageRequest.Msgs:type_name -> MqServer.Message
	18, // 43: MqServer.PushMessageResponse.response:type_name -> MqServer.Response
	17, // 44: MqServer.PullMessageRequest.ack:type_name -> MqServer.Ack
	18, // 45: MqServer.PullMessageResponse.response:type_name -> MqServer.Response
	36, // 46: MqServer.PullMessageResponse.Msgs:type_name -> MqServer.Message
	3,  // 47: MqServer.ManagePartitionRequest.ManageMode:type_name -> MqServer.ManagePartitionRequest.ManageModes
	16, // 48: MqServer.ManagePartitionRequest.Credential:type_name -> MqServer.Credentials
	18, // 49: MqServer.ManagePartitionResponse.response:type_name -> MqServer.Response
	22, // 50: MqServer.ManagePartitionResponse.NowPartitions:type_name -> MqServer.Partition
	12, // 51: MqServer.MqServerCall.JoinConsumerGroup:input_type -> MqServer.JoinConsumerGroupRequest
	10, // 52: MqServer.MqServerCall.LeaveConsumerGroup:input_type -> MqServer.LeaveConsumerGroupRequest
	9,  // 53: MqServer.MqServerCall.CheckSourceTerm:input_type -> MqServer.CheckSourceTermRequest
	7,  // 54: MqServer.MqServerCall.GetCorrespondPartition:input_type -> MqServer.GetCorrespondPartitionRequest
	14, // 55: MqServer.MqServerCall.RegisterConsumerGroup:input_type -> MqServer.RegisterConsumerGroupRequest
	5,  // 56: MqServer.MqServerCall.UnRegisterConsumerGroup:input_type -> MqServer.UnRegisterConsumerGroupRequest
	19, // 57: MqServer.MqServerCall.RegisterConsumer:input_type -> MqServer.RegisterConsumerRequest
	24, // 58: MqServer.MqServerCall.RegisterProducer:input_type -> MqServer.RegisterProducerRequest
	26, // 59: MqServer.MqServerCall.CreateTopic:input_type -> MqServer.CreateTopicRequest
	28, // 60: MqServer.MqServerCall.QueryTopic:input_type -> MqServer.QueryTopicRequest
	30, // 61: MqServer.MqServerCall.DestroyTopic:input_type -> MqServer.DestroyTopicRequest
	41, // 62: MqServer.MqServerCall.ManagePartition:input_type -> MqServer.ManagePartitionRequest
	32, // 63: MqServer.MqServerCall.UnRegisterConsumer:input_type -> MqServer.UnRegisterConsumerRequest
	34, // 64: MqServer.MqServerCall.UnRegisterProducer:input_type -> MqServer.UnRegisterProducerRequest
	17, // 65: MqServer.MqServerCall.Heartbeat:input_type -> MqServer.Ack
	39, // 66: MqServer.MqServerCall.PullMessage:input_type -> MqServer.PullMessageRequest
	37, // 67: MqServer.MqServerCall.PushMessage:input_type -> MqServer.PushMessageRequest
	13, // 68: MqServer.MqServerCall.JoinConsumerGroup:output_type -> MqServer.JoinConsumerGroupResponse
	11, // 69: MqServer.MqServerCall.LeaveConsumerGroup:output_type -> MqServer.LeaveConsumerGroupResponse
	8,  // 70: MqServer.MqServerCall.CheckSourceTerm:output_type -> MqServer.CheckSourceTermResponse
	6,  // 71: MqServer.MqServerCall.GetCorrespondPartition:output_type -> MqServer.GetCorrespondPartitionResponse
	15, // 72: MqServer.MqServerCall.RegisterConsumerGroup:output_type -> MqServer.RegisterConsumerGroupResponse
	4,  // 73: MqServer.MqServerCall.UnRegisterConsumerGroup:output_type -> MqServer.UnRegisterConsumerGroupResponse
	23, // 74: MqServer.MqServerCall.RegisterConsumer:output_type -> MqServer.RegisterConsumerResponse
	25, // 75: MqServer.MqServerCall.RegisterProducer:output_type -> MqServer.RegisterProducerResponse
	27, // 76: MqServer.MqServerCall.CreateTopic:output_type -> MqServer.CreateTopicResponse
	29, // 77: MqServer.MqServerCall.QueryTopic:output_type -> MqServer.QueryTopicResponse
	31, // 78: MqServer.MqServerCall.DestroyTopic:output_type -> MqServer.DestroyTopicResponse
	42, // 79: MqServer.MqServerCall.ManagePartition:output_type -> MqServer.ManagePartitionResponse
	33, // 80: MqServer.MqServerCall.UnRegisterConsumer:output_type -> MqServer.UnRegisterConsumerResponse
	35, // 81: MqServer.MqServerCall.UnRegisterProducer:output_type -> MqServer.UnRegisterProducerResponse
	18, // 82: MqServer.MqServerCall.Heartbeat:output_type -> MqServer.Response
	40, // 83: MqServer.MqServerCall.PullMessage:output_type -> MqServer.PullMessageResponse
	38, // 84: MqServer.MqServerCall.PushMessage:output_type -> MqServer.PushMessageResponse
	68, // [68:85] is the sub-list for method output_type
	51, // [51:68] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_MqServerRpc_proto_init() }
func file_MqServerRpc_proto_init() {
	if File_MqServerRpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_MqServerRpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterConsumerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterConsumerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCorrespondPartitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCorrespondPartitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceTermResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceTermRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveConsumerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveConsumerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinConsumerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinConsumerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConsumerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConsumerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterProducerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterProducerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterProducerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterProducerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagePartitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagePartitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MqServerRpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicRequest_PartitionCreateDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_MqServerRpc_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_MqServerRpc_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_MqServerRpc_proto_msgTypes[37].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MqServerRpc_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_MqServerRpc_proto_goTypes,
		DependencyIndexes: file_MqServerRpc_proto_depIdxs,
		EnumInfos:         file_MqServerRpc_proto_enumTypes,
		MessageInfos:      file_MqServerRpc_proto_msgTypes,
	}.Build()
	File_MqServerRpc_proto = out.File
	file_MqServerRpc_proto_rawDesc = nil
	file_MqServerRpc_proto_goTypes = nil
	file_MqServerRpc_proto_depIdxs = nil
}
